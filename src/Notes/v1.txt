import express, { Express, Request, Response, NextFunction } from "express";
import { logRequestTime } from "./middleware/userLog";
import mongoose from "mongoose";
import * as yup from "yup";

// MongoDB connection URL
const mongoUrl =
  "mongodb+srv://sereysunteang:pa$$word@cluster0.drkax.mongodb.net/yourDatabaseName?retryWrites=true&w=majority";

mongoose
  .connect(mongoUrl)
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.error("MongoDB connection error:", err));

const app = express();
const port = 4000;

// Mongoose Schema and Model
const itemSchema = new mongoose.Schema({
  name: { type: String, required: true },
  comment: { type: String, required: true },
});

const Item = mongoose.model("Item", itemSchema);

// ====================
// Start the server
// ====================
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

// ====================
// Global Middleware
// ====================
app.use(express.json());
app.use(logRequestTime);

// ====================
// Validation Schema
// ====================
const itemValidationSchema = yup.object().shape({
  name: yup.string().required("Name is required"),
  comment: yup.string().required("Comment is required"),
});

// ==========
// API
// ==========

// GET all items
app.get("/v1/items", async (req, res) => {
  try {
    const items = await Item.find();
    res.json(items);
  } catch (err) {
    res.status(500).json({ error: "Failed to retrieve items" });
  }
});

// GET a single item by ID
app.get("/v1/items/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const item = await Item.findById(id);
    if (!item) {
      return res.status(404).json({ message: "Item not found" });
    }
    return res.status(200).json(item);
  } catch (err) {
    return res.status(500).json({ error: "Failed to retrieve item" });
  }
});

// POST create a new item
app.post("/v1/items", async (req, res) => {
  const { name, comment } = req.body;

  try {
    const newItem = new Item({ name, comment });
    await newItem.save();
    res.status(201).json(newItem);
  } catch (err) {
    res.status(500).json({ error: "Failed to create item" });
  }
});

// PUT update an existing item by ID
app.put("/v1/items/:id", async (req: Request, res: Response) => {
  const id = req.params.id;
  const { name, comment } = req.body;

  try {
    // Update the item and return the new document
    const updatedItem = await Item.findByIdAndUpdate(
      id,
      { name, comment },
      { new: true, runValidators: true } // `runValidators` ensures the update respects the schema validation
    );

    if (!updatedItem) {
      return res.status(404).json({ error: "Item not found" });
    }

    return res.status(200).json(updatedItem);
  } catch (err) {
    return res.status(500).json({ error: "Failed to update item" });
  }
});

// DELETE an item by ID
app.delete("/v1/items/:id", async (req: Request, res: Response) => {
  const id = req.params.id;

  try {
    // Find and delete the item
    const deletedItem = await Item.findByIdAndDelete(id);
    if (!deletedItem) {
      return res.status(404).json({ error: "Item not found" });
    }
    return res
      .status(200)
      .json({ message: "Item deleted successfully", item: deletedItem });
  } catch (err) {
    return res.status(500).json({ error: "Failed to delete item" });
  }
});
