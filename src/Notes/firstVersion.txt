//index.ts old version
//how to install into devdependencies: yarn add --dev <name_files>

import express, { Request, Response, NextFunction } from "express";
import { logRequestTime } from "./middleware/userLog";
import { Database, Item } from "./db/data";


const app = express();
const port = 4000;

// Use the logRequestTime middleware globally
app.use(logRequestTime);

app.use(express.json());

// Use the imported Database as the in-memory data store
let items: Item[] = Database;

// GET all items
app.get("/items", (_req: Request, res: Response) => {
  res.json(items);
});

// GET single item by ID
app.get("/items/:id", (req: Request, res: Response) => {
  const id = parseInt(req.params.id, 10);
  if (isNaN(id)) {
    return res.status(400).json({ error: "Invalid ID format" });
  }
  const item = items.find((i) => i.id === id);
  if (item) {
    return res.json(item);
  } else {
    return res.status(404).json({ error: "Item not found" });
  }
});

// POST create a new item
app.post("/items", (req: Request, res: Response) => {
  const { name, description, price } = req.body;

  // Basic validation
  if (
    typeof name !== "string" ||
    typeof description !== "string" ||
    typeof price !== "number"
  ) {
    return res.status(400).json({ error: "Missing or invalid fields" });
  }

  const newItem: Item = {
    id: items.length > 0 ? items[items.length - 1].id + 1 : 1,
    name,
    description,
    price,
  };
  items.push(newItem);
  return res.status(201).json(newItem);
});

// PUT update an item by ID
app.put("/items/:id", (req: Request, res: Response) => {
  console.log("PUT /items/:id called with ID:", req.params.id);
  console.log("Request body:", req.body);

  const id = parseInt(req.params.id, 10);
  if (isNaN(id)) {
    return res.status(400).json({ error: "Invalid ID format" });
  }

  const { name, description, price } = req.body;

  if (
    typeof name !== "string" ||
    typeof description !== "string" ||
    typeof price !== "number"
  ) {
    console.log("Validation failed");
    return res.status(400).json({ error: "Missing or invalid fields" });
  }

  const item = items.find((i) => i.id === id);
  if (item) {
    console.log("Item found, updating...");
    item.name = name;
    item.description = description;
    item.price = price;
    console.log("Item updated:", item);
    return res.json(item);
  } else {
    console.log("Item not found");
    return res.status(404).json({ error: "Item not found" });
  }
});

// DELETE an item by ID
app.delete("/items/:id", (req: Request, res: Response) => {
  const id = parseInt(req.params.id, 10);
  if (isNaN(id)) {
    return res.status(400).json({ error: "Invalid ID format" });
  }
  const index = items.findIndex((i) => i.id === id);

  if (index !== -1) {
    const [deletedItem] = items.splice(index, 1);
    return res.json(deletedItem);
  } else {
    return res.status(404).json({ error: "Item not found" });
  }
});

// Start the server
app.listen(port, () => {
  console.log(Server running on http://localhost:${port});
});